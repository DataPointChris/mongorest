openapi: 3.0.1
info:
  title: üêº BamBORING API üêº
  description: ""
  contact:
    name: Designed by Chris
    url: https://www.github.com/datapointchris/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Connect with Chris
  url: https://www.linkedin.com/in/chris-birch/
servers:
  - url: http://ec2-54-144-151-41.compute-1.amazonaws.com
tags:
  - name: employees
    description: Employee directory
paths:
  /api/employees/:
    get:
      tags:
        - employees
      summary: View employee directory
      description: View every employee in the entire organization
      operationId: ViewEmployees
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
        400:
          description: Invalid status value
          content: {}
    post:
      tags:
        - employees
      summary: Add a new employee to the store
      operationId: addEmployee
      requestBody:
        description: Employee to add to the directory
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /api/employees/{id}/:
    get:
      tags:
        - employees
      summary: Find employee by ID
      description: Returns a single employee
      operationId: getEmployeeById
      parameters:
        - name: id
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Employee not found
          content: {}
      security:
        - api_key: []
    put:
      tags:
        - employees
      summary: Update employee by id
      operationId: updateEmployeeById
      parameters:
        - name: id
          in: path
          description: ID of employee to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Employee to add to the directory
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
    delete:
      tags:
        - employees
      summary: Deletes an employee
      operationId: deleteEmployee
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: id
          in: path
          description: employee ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Employee not found
          content: {}
      security:
        - api_key: []
  /api/roles/:
    get:
      tags:
        - roles
      summary: Company role directory
      description: Returns a list of roles in the company
      operationId: getRoles
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
      security:
        - api_key: []
  /api/roles/{name}/:
    put:
      tags:
        - roles
      summary: Update role by name
      operationId: updateRoleByName
      parameters:
        - name: name
          in: path
          description: name of role to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: role to add to the directory
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
  /api/roles/{name}/employees/:
    get:
      tags:
        - roles
      summary: Retrieves employees with role name
      operationId: getEmployeesByRole
      parameters:
        - name: name
          in: path
          description: name of role
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Role not found
          content: {}
  /api/roles/{name}/departments/:
    get:
      tags:
        - roles
      summary: Retrieves department with role name
      operationId: getDepartmentByRole
      parameters:
        - name: name
          in: path
          description: name of role
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Role not found
          content: {}
  /api/departments/:
    get:
      tags:
        - departments
      summary: Company department directory
      description: Returns a list of departments in the company
      operationId: getDepartments
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Department"
      security:
        - api_key: []

  /api/departments/{name}/:
    put:
      tags:
        - departments
      summary: Update department by name
      operationId: updatedepartmentByname
      parameters:
        - name: name
          in: path
          description: name of department to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: department to add to the directory
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Department"
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
  /api/departments/{name}/employees/:
    get:
      tags:
        - departments
      summary: Retrieves employees within departmentname
      operationId: getEmployeesByDepartment
      parameters:
        - name: name
          in: path
          description: name of department
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Department"
        400:
          description: Invalid name supplied
          content: {}
        404:
          description: Department not found
          content: {}
  /api/departments/{name}/roles/:
    get:
      tags:
        - departments
      summary: Retrieves roles within department name
      operationId: getRolesByDepartment
      parameters:
        - name: name
          in: path
          description: name of department
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Department"
        400:
          description: Invalid name supplied
          content: {}
        404:
          description: Department not found
          content: {}
components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: Employee
    Role:
      type: string
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Role
    Department:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Department
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
